@{
    ViewBag.Title = "Iframe";
    Layout = null;
}

<!DOCTYPE html>
<html>
  <head>
    <title>Place Autocomplete Address Form</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <link rel="stylesheet" href="css/iframe.css">
    <link href="~/Content/UserMenu/iframe.css" rel="stylesheet" />
    <style>
      #map-canvas1 {
        height: 70%;
        margin: 0px;
        padding: 0px
      }
        

      #map1 {
        width: 900px;
        height: 950px;
      }
        
    </style>
    <link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500">
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true&libraries=places"></script>
    <script>
// This example displays an address form, using the autocomplete feature
// of the Google Places API to help users fill in the information.
var map1;
var marker = new google.maps.Marker;
 var geocoder = new google.maps.Geocoder();    
        
        
  var addCircle = function (map1, coordinates, accuracy) {
      var circleOptions = {
      center: coordinates,
      clickable: false,
      fillColor: "blue",
      fillOpacity: 0.15,
      map: map1,
      radius: accuracy,
      strokeColor: "blue",
      strokeOpacity: 0.3,
      strokeWeight: 2
    };

    return new google.maps.Circle(circleOptions);
  }; 
        
        
        function handleLocationError(browserHasGeolocation, infowindow, pos) {
  infowindow.setPosition(pos);
  infowindow.setContent(browserHasGeolocation ?
                        'Error: The Geolocation service failed.' :
                        'Error: Your browser doesn\'t support geolocation.');
}
function initMap() {
  map1 = new google.maps.Map(document.getElementById('map1'), {
    zoom: 15,
    center: {lat: 48.290718, lng:  25.934960} 
  });
  var geocoder = new google.maps.Geocoder;
  var infowindow = new google.maps.InfoWindow;

    
        
    map1.addListener('click', function(e) {
    geocodeLatLng(e.latLng,geocoder, map1, infowindow); 
  }); 
    
    if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {      
        var pos = {
        lat: position.coords.latitude,
        lng: position.coords.longitude,
      };   
      infowindow.setPosition(pos);
      infowindow.setContent('Location found.');
      map1.setCenter(pos);
        addCircle(map1,pos,position.coords.accuracy);
        test1 = new google.maps.Marker({
          position: pos,
          map: map1
        });
        marker.setMap(test1);
    }, function() {
     // handleLocationError(true, infoWindow, map.getCenter());
    });
  }else {
    // Browser doesn't support Geolocation
   // handleLocationError(false, infoWindow, map.getCenter());
  }
    
}
        
var placeSearch, autocomplete;
var componentForm = {
  street_number: 'short_name',
  route: 'long_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  country: 'long_name',
  postal_code: 'short_name'
};

function geocodeLatLng(LatLong,geocoder, map1, infowindow) {
  var lon = LatLong.lat();
  var lng = LatLong.lng();
  var latlng = {lat: lon, lng: lng};
  geocoder.geocode({'location': latlng}, function(results, status) {
    if (status === google.maps.GeocoderStatus.OK) {
      if (results[1]) {
          
          
          marker.setMap(null);
        
          var test = new google.maps.Marker({
          position: latlng,
          map: map1
        });
          

        marker = test;    
        infowindow.setContent(results[0].formatted_address);
        
          //shows adrees text
        infowindow.open(map1, marker);
          document.getElementById('autocomplete').value = results[0].formatted_address;
      } else {
        window.alert('No results found');
      }
    } else {
      window.alert('Geocoder failed due to: ' + status);
    }
  });    
}   
        
function initialize() {
  // Create the autocomplete object, restricting the search
  // to geographical location types.
  initMap();
  autocomplete = new google.maps.places.Autocomplete(
    (document.getElementById('autocomplete')),
      { types: ['geocode'] });
  // When the user selects an address from the dropdown,
  // populate the address fields in the form.
  google.maps.event.addListener(autocomplete, 'place_changed', function() {
    fillInAddress();
  });
    

    
}

// [START region_fillform]
function fillInAddress() {
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();

  for (var component in componentForm) {
    document.getElementById(component).value = '';
    document.getElementById(component).disabled = false;
  }

  // Get each component of the address from the place details
  // and fill the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {
      var val = place.address_components[i][componentForm[addressType]];
      document.getElementById(addressType).value = val;
    }
  }
}
// [END region_fillform]

// [START region_geolocation]
// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = new google.maps.LatLng(
          position.coords.latitude, position.coords.longitude);
      var circle = new google.maps.Circle({
        center: geolocation,
        radius: position.coords.accuracy
      });
      autocomplete.setBounds(circle.getBounds());
    });
  }
}
        

        


      //Get from input our adress, convert it in coordinate, set point
geocode = function() 
{
	var address = document.getElementById('autocomplete').value;
	geocoder.geocode( { 'address': address}, function(results, status) {
		if (status == google.maps.GeocoderStatus.OK) 
		{
              marker.setMap(null);
			map1.setCenter(results[0].geometry.location);
			marker = new google.maps.Marker({
				map: map1, 
				position: results[0].geometry.location
			});
		} 
		else 
		{
			alert("Geocode was not successful for the following reason: " + status);
		}
	});
}
        
// [END region_geolocation]

    </script>

    <style>
      #locationField, #controls {
        position: relative;
        width: 480px;
      }
      #autocomplete {
        position: absolute;
        top: 0px;
        left: 0px;
        width: 99%;
      }
      .label {
        text-align: right;
        font-weight: bold;
        width: 100px;
        color: #303030;
      }
      #address {
        border: 1px solid #000090;
        background-color: #f0f0ff;
        width: 480px;
        padding-right: 2px;
      }
      #address td {
        font-size: 10pt;
      } 
      .field {
        width: 99%;
      }
      .slimField {
        width: 80px;
      }
      .wideField {
        width: 200px;
      }
      #locationField {
        height: 20px;
        margin-bottom: 2px;
      }
    </style>
  </head>

  <body onload="initialize()">

  <div class="container">
   <div class="row">
  <div class="img col-md-4 icontainer" style="background-image: url(/Content/Picture/Iphone.png)">
    <iframe class="iframe" src="http://localhost:51540/UserPage" align="left"   scrolling="no"  seamless="seamless">>
            Ваш браузер не поддерживает плавающие фреймы!
        </iframe>
        </div>
   

  
<div id="map-container1">
<div id="map1"></div>
</div>
</div>
</div>
  </body>
</html>