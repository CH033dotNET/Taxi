@model Model.DTO.OrderExDTO

<table class="table" id="EditOrderTable">
	<caption>@Resources.Resource.Order</caption>
	<tr>
		<td></td>
		<td>
			@Html.HiddenFor(x => Model.Id)
		</td>
	</tr>
	<tr>
		<td>
			@Html.Label(Resources.Resource.OrderTime)
		</td>
		<td>
			@if (Model.Status == Common.Enum.OrderStatusEnum.NotApproved)
			{
				@Html.TextBoxFor(x => Model.OrderTime, new { @required = true, @minlength = "3" })
				@Html.ValidationMessageFor(x => x.OrderTime)
			}
			else
			{
				@Html.DisplayFor(x => Model.OrderTime)
			}
		</td>
	</tr>
	@if (Model.AddressFrom != null)
	{
		<tr>
			<td>
				@Html.Label(Resources.Resource.Address)
			</td>
			<td>
				@if (Model.Status == Common.Enum.OrderStatusEnum.NotApproved)
				{
					@Html.TextBoxFor(x => Model.AddressFrom.Address, new { @required = true, @minlength = "8" })
					@Html.ValidationMessageFor(x => x.AddressFrom.Address)
				}
				else
				{
					@Html.DisplayFor(x => Model.AddressFrom.Address)
				}
			</td>
		</tr>
   if (!string.IsNullOrEmpty(Model.AddressFrom.Building) && !string.IsNullOrEmpty(Model.AddressFrom.Entrance) && !string.IsNullOrEmpty(Model.AddressFrom.Note))
	{  
	     <tr>
			<td>
				@Html.Label(Resources.Resource.Building)
			</td>
			<td>
				@if (Model.Status == Common.Enum.OrderStatusEnum.NotApproved)
				{
					@Html.TextBoxFor(x => Model.AddressFrom.Building, new { @required = true, @minlength = "1" })
					@Html.ValidationMessageFor(x => x.AddressFrom.Building)
				}
				else
				{
					@Html.DisplayFor(x => Model.AddressFrom.Building)
				}
			</td>
		</tr>
		<tr>
			<td>
				@Html.Label(Resources.Resource.Entrance)
			</td>
			<td>
				@if (Model.Status == Common.Enum.OrderStatusEnum.NotApproved)
				{
					@Html.TextBoxFor(x => Model.AddressFrom.Entrance, new { @required = true, @minlength = "1" })
					@Html.ValidationMessageFor(x => x.AddressFrom.Entrance)
				}
				else
				{
					@Html.DisplayFor(x => Model.AddressFrom.Entrance)
				}
			</td>
		</tr>
		<tr>
			<td>
				@Html.Label(Resources.Resource.Note)
			</td>
			<td>
				@Html.DisplayFor(x => Model.AddressFrom.Note, new { @required = true, @minlength = "2" })
			</td>
		</tr>
      }
	}
</table>
@if (Model.AddressesTo.Count > 0)
{
	<div>
		<p class="paragraph">@Resources.Resource.PlaceDelivery <span class="glyphicon glyphicon-chevron-down" style="float:right;"></span></p>
	</div>
	<div id="AddressesTable" style="display:none">
		<table class="table" id="EditOrderTable">
			@{
	for (int i = 0; i < Model.AddressesTo.Count; i++)
	{
		<tr>
			<td>
				@Html.Label(Resources.Resource.Address+" "+ (i + 1))
			</td>
			<td>
               @if (!string.IsNullOrEmpty(Model.AddressesTo[i].Address)) { 
				   if (Model.Status == Common.Enum.OrderStatusEnum.NotApproved)
				   {
					@Html.TextBoxFor(x => Model.AddressesTo[i].Address, new { @required = true, @minlength = "3" })
					@Html.ValidationMessageFor(x => Model.AddressesTo[i].Address)
				   }
				   else
				   {
					@Html.DisplayFor(x => Model.AddressesTo[i].Address)
				   }
			   }
				@if (!string.IsNullOrEmpty(Model.AddressesTo[i].Building)) { 
		if (Model.Status == Common.Enum.OrderStatusEnum.NotApproved)
		{
			@Html.TextBoxFor(x => Model.AddressesTo[i].Building, new { @required = true, @minlength = "3" })
			@Html.ValidationMessageFor(x => Model.AddressesTo[i].Building)
		}
		else
		{
			@Html.DisplayFor(x => Model.AddressesTo[i].Building)
		}
				}
			</td>
		</tr>
	}
			}
		</table>
	</div>
}
@if (Model.AdditionallyRequirements != null)
{
	<div>
		<p class="paragraph">@Resources.Resource.Additionally<span class="glyphicon glyphicon-chevron-down" style="float:right;"></span></p>
	</div>
	<div id="RequirementsTable" style="display:none">
		<table class="table" id="EditOrderTable">
			<tr>
				<td>
					@Html.Label(Resources.Resource.Passengers)
				</td>
				<td>
					@if (Model.Status == Common.Enum.OrderStatusEnum.NotApproved)
					{
						@Html.TextBoxFor(x => Model.AdditionallyRequirements.Passengers, new { @required = true, @minlength = "1" })
						@Html.ValidationMessageFor(x => x.AdditionallyRequirements.Passengers)
					}
					else
					{
						@Html.DisplayFor(x => Model.AdditionallyRequirements.Passengers)
					}
				</td>
			</tr>
			<tr>
				<td>@Html.Label(Resources.Resource.ClassOfCar)</td>
				<td>
					@Html.DropDownListFor(x => Model.AdditionallyRequirements.Car,
					new SelectList(Enum.GetValues(typeof(Common.Enum.CarEnums.CarClassEnum))), htmlAttributes: (Model.Status == Common.Enum.OrderStatusEnum.NotApproved)? null : new { @disabled = "disabled"})
				</td>
			</tr>
			<tr>
				<td>@Html.Label(Resources.Resource.Additionally)</td>
				<td>
					<div id="requirements">
						<ul>
							<li>
								@Html.CheckBoxFor(m => Model.AdditionallyRequirements.Bag, htmlAttributes: (Model.Status == Common.Enum.OrderStatusEnum.NotApproved) ? null : new { @disabled = "disabled" })
								@Html.Label(Resources.Resource.WithBaggage)
							</li>
							<li>
								@Html.CheckBoxFor(m => Model.AdditionallyRequirements.Conditioner, htmlAttributes: (Model.Status == Common.Enum.OrderStatusEnum.NotApproved) ? null : new { @disabled = "disabled" })
								@Html.Label(Resources.Resource.Conditioner)
							</li>
							<li>
								@Html.CheckBoxFor(m => Model.AdditionallyRequirements.Courier, htmlAttributes: (Model.Status == Common.Enum.OrderStatusEnum.NotApproved) ? null : new { @disabled = "disabled" })
								@Html.Label(Resources.Resource.Courier)
							</li>
							<li>
								@Html.CheckBoxFor(m => Model.AdditionallyRequirements.MyCar, htmlAttributes: (Model.Status == Common.Enum.OrderStatusEnum.NotApproved) ? null : new { @disabled = "disabled" })
								@Html.Label(Resources.Resource.MyCar)
							</li>
							<li>
								@Html.CheckBoxFor(m => Model.AdditionallyRequirements.NoSmoking, htmlAttributes: (Model.Status == Common.Enum.OrderStatusEnum.NotApproved) ? null : new { @disabled = "disabled" })
								@Html.Label(Resources.Resource.NoSmoking)
							</li>
							<li>
								@Html.CheckBoxFor(m => Model.AdditionallyRequirements.English, htmlAttributes: (Model.Status == Common.Enum.OrderStatusEnum.NotApproved) ? null : new { @disabled = "disabled" })
								@Html.Label(Resources.Resource.WithEnglish)
							</li>
							<li>
								@Html.CheckBoxFor(m => Model.AdditionallyRequirements.Pets, htmlAttributes: (Model.Status == Common.Enum.OrderStatusEnum.NotApproved)? null : new { @disabled = "disabled"})
								@Html.Label(Resources.Resource.WithPets)
							</li>
							<li>
								@Html.CheckBoxFor(m => Model.AdditionallyRequirements.Smoking, htmlAttributes: (Model.Status == Common.Enum.OrderStatusEnum.NotApproved)? null : new { @disabled = "disabled"})
								@Html.Label(Resources.Resource.Smoking)
							</li>
							<li>
								@Html.CheckBoxFor(m => Model.AdditionallyRequirements.Urgently, htmlAttributes: (Model.Status == Common.Enum.OrderStatusEnum.NotApproved)? null : new { @disabled = "disabled"})
								@Html.Label(Resources.Resource.Urgently)
							</li>
						</ul>
					</div>
				</td>
			</tr>

		</table>
	</div>
}
@if (!string.IsNullOrEmpty(Model.Name))
{
	<table class="table" id="EditOrderTable">
		<caption>@Resources.Resource.Client</caption>
		<tr>
			<td>
				@Html.Label(Resources.Resource.YourName)
			</td>
			<td>
				@Html.DisplayFor(x => Model.Name, new { @required = true, @minlength = "3" })
			</td>
		</tr>
		<tr>
			<td>
				@Html.Label(Resources.Resource.PhoneNumber)
			</td>
			<td>
				@Html.DisplayFor(x => Model.Phone, new { @required = true, @minlength = "10" })
			</td>
		</tr>
	</table>
}
@if (Model.DriverId != null)
{
	<table class="table" id="EditOrderTable">
		<caption>@Resources.Resource.Driver</caption>
		<tr>
			<td>
				@Html.Label(Resources.Resource.Driver)
			</td>
			<td>
				@if (Model.Status == Common.Enum.OrderStatusEnum.NotApproved)
				{
					@Html.TextBoxFor(x => Model.DriverId, new { @required = true, @minlength = "4" })
					@Html.ValidationMessageFor(x => x.DriverId)
				}
				else
				{
					@Html.DisplayFor(x => Model.DriverId)
				}
			</td>
		</tr>
		@if (Model.CarId != null)
		{
			<tr>
				<td>
					@Html.Label(@Resources.Resource.Car_Number)
				</td>
				<td>
					@if (Model.Status == Common.Enum.OrderStatusEnum.NotApproved)
					{
						@Html.TextBoxFor(x => Model.CarId, new { @required = true, @minlength = "3" })
						@Html.ValidationMessageFor(x => x.CarId)
					}
					else
					{
						@Html.DisplayFor(x => Model.CarId)
					}
				</td>
			</tr>
		}
	</table>
}
<table class="table" id="EditOrderTable">
	<caption>@Resources.Resource.TripInfo</caption>
	<tr>
		<td>
			@Html.Label(Resources.Resource.WaitingTime)
		</td>
		<td>
			@if (Model.Status == Common.Enum.OrderStatusEnum.NotApproved) { 
			   @Html.TextBoxFor(x => Model.WaitingTime, new { @required = true, @minlength = "1" })
			   @Html.ValidationMessageFor(x => x.WaitingTime)
			}
            else
            {
	           @Html.DisplayFor(x => Model.WaitingTime)
            }
		</td>
	</tr>
	<tr>
		<td>
			@Html.Label(Resources.Resource.Price)
		</td>
		<td>
			@if (Model.Status == Common.Enum.OrderStatusEnum.NotApproved) {
			@Html.TextBoxFor(x => Model.Price, new { @required = true, @minlength = "1" })
			@Html.ValidationMessageFor(x => x.Price)
			}
			else
			{
			   @Html.DisplayFor(x => Model.Price)
			}
		</td>
	</tr>
	<tr>
		<td>
			@Html.Label(Resources.Resource.Perquisite)
		</td>
		<td>
			@if (Model.Status == Common.Enum.OrderStatusEnum.NotApproved) {
			   @Html.TextBoxFor(x => Model.Perquisite, new { @required = true, @minlength = "1" })
			   @Html.ValidationMessageFor(x => x.Perquisite)
			}
			else
			{
			   @Html.DisplayFor(x => Model.Perquisite)
			}
		</td>
	</tr>
</table>
@if (Model.Status == Common.Enum.OrderStatusEnum.NotApproved) { 
<input type="submit" id="mdal-submit" class="btn btn-success" name="Ok" value=@Resources.Resource.editString />}
